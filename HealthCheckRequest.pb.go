// Code generated by protoc-gen-go.
// source: HealthCheckRequest.proto
// DO NOT EDIT!

/*
Package lightcheck is a generated protocol buffer package.

It is generated from these files:
	HealthCheckRequest.proto

It has these top-level messages:
	HealthCheckRequest
	HealthCheckResponse
	ServiceDependency
*/
package lightcheck

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type ServiceStatus int32

const (
	ServiceStatus_UP       ServiceStatus = 0
	ServiceStatus_DOWN     ServiceStatus = 2
	ServiceStatus_DEGRADED ServiceStatus = 3
)

var ServiceStatus_name = map[int32]string{
	0: "UP",
	2: "DOWN",
	3: "DEGRADED",
}
var ServiceStatus_value = map[string]int32{
	"UP":       0,
	"DOWN":     2,
	"DEGRADED": 3,
}

func (x ServiceStatus) Enum() *ServiceStatus {
	p := new(ServiceStatus)
	*p = x
	return p
}
func (x ServiceStatus) String() string {
	return proto.EnumName(ServiceStatus_name, int32(x))
}
func (x *ServiceStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ServiceStatus_value, data, "ServiceStatus")

	if err != nil {
		return err
	}
	*x = ServiceStatus(value)
	return nil
}
func (ServiceStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type HealthCheckRequest struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *HealthCheckRequest) Reset()                    { *m = HealthCheckRequest{} }
func (m *HealthCheckRequest) String() string            { return proto.CompactTextString(m) }
func (*HealthCheckRequest) ProtoMessage()               {}
func (*HealthCheckRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type HealthCheckResponse struct {
	Message          *string              `protobuf:"bytes,1,req,name=message" json:"message,omitempty"`
	Status           *ServiceStatus       `protobuf:"varint,2,req,name=status,enum=lightcheck.ServiceStatus,def=2" json:"status,omitempty"`
	Dependencies     []*ServiceDependency `protobuf:"bytes,3,rep,name=dependencies" json:"dependencies,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *HealthCheckResponse) Reset()                    { *m = HealthCheckResponse{} }
func (m *HealthCheckResponse) String() string            { return proto.CompactTextString(m) }
func (*HealthCheckResponse) ProtoMessage()               {}
func (*HealthCheckResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

const Default_HealthCheckResponse_Status ServiceStatus = ServiceStatus_DOWN

func (m *HealthCheckResponse) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

func (m *HealthCheckResponse) GetStatus() ServiceStatus {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return Default_HealthCheckResponse_Status
}

func (m *HealthCheckResponse) GetDependencies() []*ServiceDependency {
	if m != nil {
		return m.Dependencies
	}
	return nil
}

type ServiceDependency struct {
	Name             *string        `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Message          *string        `protobuf:"bytes,2,req,name=message" json:"message,omitempty"`
	Status           *ServiceStatus `protobuf:"varint,3,req,name=status,enum=lightcheck.ServiceStatus,def=2" json:"status,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *ServiceDependency) Reset()                    { *m = ServiceDependency{} }
func (m *ServiceDependency) String() string            { return proto.CompactTextString(m) }
func (*ServiceDependency) ProtoMessage()               {}
func (*ServiceDependency) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

const Default_ServiceDependency_Status ServiceStatus = ServiceStatus_DOWN

func (m *ServiceDependency) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *ServiceDependency) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

func (m *ServiceDependency) GetStatus() ServiceStatus {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return Default_ServiceDependency_Status
}

func init() {
	proto.RegisterType((*HealthCheckRequest)(nil), "lightcheck.HealthCheckRequest")
	proto.RegisterType((*HealthCheckResponse)(nil), "lightcheck.HealthCheckResponse")
	proto.RegisterType((*ServiceDependency)(nil), "lightcheck.ServiceDependency")
	proto.RegisterEnum("lightcheck.ServiceStatus", ServiceStatus_name, ServiceStatus_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for LightCheck service

type LightCheckClient interface {
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type lightCheckClient struct {
	cc *grpc.ClientConn
}

func NewLightCheckClient(cc *grpc.ClientConn) LightCheckClient {
	return &lightCheckClient{cc}
}

func (c *lightCheckClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := grpc.Invoke(ctx, "/lightcheck.LightCheck/HealthCheck", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LightCheck service

type LightCheckServer interface {
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
}

func RegisterLightCheckServer(s *grpc.Server, srv LightCheckServer) {
	s.RegisterService(&_LightCheck_serviceDesc, srv)
}

func _LightCheck_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightCheckServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightcheck.LightCheck/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightCheckServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LightCheck_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lightcheck.LightCheck",
	HandlerType: (*LightCheckServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _LightCheck_HealthCheck_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 253 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x92, 0xf0, 0x48, 0x4d, 0xcc,
	0x29, 0xc9, 0x70, 0xce, 0x48, 0x4d, 0xce, 0x0e, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0xd1, 0x2b,
	0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0xca, 0xc9, 0x4c, 0xcf, 0x28, 0x49, 0x06, 0x49, 0x28, 0x89,
	0x70, 0x09, 0x61, 0xaa, 0x53, 0xea, 0x61, 0xe4, 0x12, 0x46, 0x11, 0x2e, 0x2e, 0xc8, 0xcf, 0x2b,
	0x4e, 0x15, 0xe2, 0xe7, 0x62, 0xcf, 0x4d, 0x2d, 0x2e, 0x4e, 0x4c, 0x4f, 0x95, 0x60, 0x54, 0x60,
	0xd2, 0xe0, 0x14, 0xd2, 0xe7, 0x62, 0x2b, 0x2e, 0x49, 0x2c, 0x29, 0x2d, 0x96, 0x60, 0x02, 0xf2,
	0xf9, 0x8c, 0x24, 0xf5, 0x10, 0x66, 0xeb, 0x05, 0xa7, 0x16, 0x95, 0x65, 0x26, 0xa7, 0x06, 0x83,
	0x15, 0x58, 0xb1, 0xb8, 0xf8, 0x87, 0xfb, 0x09, 0x19, 0x73, 0xf1, 0xa4, 0xa4, 0x16, 0xa4, 0xe6,
	0xa5, 0xa4, 0xe6, 0x25, 0x67, 0xa6, 0x16, 0x4b, 0x30, 0x2b, 0x30, 0x6b, 0x70, 0x1b, 0xc9, 0x62,
	0xd1, 0xe6, 0x02, 0x53, 0x56, 0xa9, 0x94, 0xcc, 0x25, 0x88, 0x21, 0x28, 0xc4, 0xc3, 0xc5, 0x92,
	0x97, 0x98, 0x0b, 0x73, 0x08, 0x92, 0xcb, 0x98, 0xd0, 0x5c, 0xc6, 0x4c, 0x94, 0xcb, 0xb4, 0xf4,
	0xb9, 0x78, 0x51, 0x84, 0x85, 0xd8, 0xb8, 0x98, 0x42, 0x03, 0x04, 0x18, 0x84, 0x38, 0xb8, 0xc0,
	0x0a, 0x04, 0x98, 0x80, 0x56, 0x72, 0xb8, 0xb8, 0xba, 0x07, 0x39, 0xba, 0xb8, 0xba, 0x08, 0x30,
	0x1b, 0xc5, 0x71, 0x71, 0xf9, 0x80, 0x8c, 0x04, 0x07, 0x91, 0x50, 0x00, 0x17, 0x37, 0x52, 0x88,
	0x09, 0xc9, 0x21, 0x5b, 0x87, 0x19, 0xc2, 0x52, 0xf2, 0x38, 0xe5, 0x21, 0x41, 0xad, 0xc4, 0x00,
	0x08, 0x00, 0x00, 0xff, 0xff, 0x58, 0xb8, 0x1c, 0x40, 0xc1, 0x01, 0x00, 0x00,
}
